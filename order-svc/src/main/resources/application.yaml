spring:
  application:
    name: ORDER-SVC
  #Vault Configuration - With Spring Boot 2.4+ and Spring Cloud Vault 3+, using bootstrap.yaml is deprecated in favor of keeping all configuration in application.yaml (or .properties) and using the new Config Data API. You can migrate by moving your Vault config to application.yaml and adding:
  cloud:
    vault:
      uri: http://127.0.0.1:8200                          # Vault server URL
      #token: hvs.UeRA9uUXVXflT5OGoT9Emxih                 # Use root token only for dev - Added this token in ENV Var for this app
      #SPRING_CLOUD_VAULT_TOKEN=hvs.UeRA9uUXVXflT5OGoT9Emxih
      kv:
        enabled: true
        backend: secret
        default-context: ORDER-SVC

  config:
    import: vault://              # Automatically import secrets from Vault path

  security:                               #Spring Security - Order also acts as Clients - need Client Config.
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://integrator-9957757.okta.com/oauth2/default

      client: #Order Service also acts as Clients - need Client Config.
        registration:
          my-internal-client: # any name
            provider: okta
            authorization-grant-type: client_credentials            # Client Config
            scope: internal                                            #use for internal service communication
            client-id: ${OKTA_CLIENT_ID}
            client-secret: ${OKTA_CLIENT_SECRET}

        provider:
          okta:
            issuer-uri: https://integrator-9957757.okta.com/oauth2/default

  #PostgreSQL Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/ecommerce
    driver-class-name: org.postgresql.Driver
    username: ${spring.datasource.username}
    password: ${spring.datasource.password}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect       #org.hibernate.dialect.H2Dialect <-H2 Dialect

  #KAFKA Configuration
  kafka:
    bootstrap-servers: localhost:9092  #my-kafka.kafka.svc.cluster.local:9092    #kubernetes config url
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: order-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'

order:
  topic: order-events

server:
  port: 8000

#Okta Configuration
okta:
  oauth2:
    issuer: https://integrator-9957757.okta.com/oauth2/default
    audience: api://default



#H2 DB Connection Details
  #datasource:
    #url: jdbc:h2:mem:ordersdb
    #driver-class-name: org.h2.Driver
    #username: sa
   # password:
  #h2:
    #console:
      #enabled: true
      #path: /h2-console


